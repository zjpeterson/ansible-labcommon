---
- name: Create EC2 key
  amazon.aws.ec2_key:
    name: "{{ aws_ec2_key_name }}"
    region: "{{ aws_ec2_region }}"
  register: _key

- name: Display key info
  ansible.builtin.debug:
    var: _key.key

- name: Save key file
  ansible.builtin.copy:
    content: "{{ _key.key.private_key }}"
    dest: "{{ playbook_dir }}/ansible.pem"
    mode: '400'
  when: _key.key.private_key is defined

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ aws_ec2_sg_name }}"
    description: Ports for resources provisioned by Ansible
    vpc_id: "{{ aws_ec2_vpc }}"
    rules: "{{ aws_ec2_sg_rules }}"
    region: "{{ aws_ec2_region }}"
  register: _sg

- name: Provision EC2 instances (basic networking)
  amazon.aws.ec2_instance:
    name: "{{ aws_ec2_name }}"
    instance_type: "{{ aws_ec2_type }}"
    image_id: "{{ aws_ec2_ami }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: "{{ aws_ec2_disk }}"
          delete_on_termination: true
    vpc_subnet_id: "{{ aws_ec2_subnet }}"
    security_group: "{{ _sg.group_id }}"
    key_name: ansible
    region: "{{ aws_ec2_region }}"
    network:
      assign_public_ip: true
      delete_on_termination: true
    user_data: "{{ aws_ec2_user_data | default(omit) }}"
  register: _instance
  when: not aws_ec2_net_advanced

- name: Provision EC2 instances (advanced networking)
  amazon.aws.ec2_instance:
    name: "{{ aws_ec2_name }}"
    instance_type: "{{ aws_ec2_type }}"
    image_id: "{{ aws_ec2_ami }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: "{{ aws_ec2_disk }}"
          delete_on_termination: true
    vpc_subnet_id: "{{ aws_ec2_subnet }}"
    security_group: "{{ _sg.group_id }}"
    key_name: ansible
    region: "{{ aws_ec2_region }}"
    user_data: "{{ aws_ec2_user_data | default(omit) }}"
    network_interfaces: "{{ aws_ec2_net_interfaces }}"
  register: _instance
  when: aws_ec2_net_advanced

- name: Get public IP
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ _instance.instance_ids }}"
    region: "{{ aws_ec2_region }}"
  until: _ec2_info.instances.0.public_ip_address is defined
  delay: 5
  retries: 10
  register: _ec2_info
  when: not aws_ec2_net_advanced

- name: Create instance DNS
  amazon.aws.route53:
    state: present
    record: "{{ aws_ec2_name }}.{{ aws_ec2_dns_zone }}"
    zone: "{{ aws_ec2_dns_zone }}"
    type: A
    value: "{{ _ec2_info.instances.0.public_ip_address }}"
    overwrite: true
    wait: true
  when:
    - aws_ec2_dns_zone != 'sandbox0000.opentlc.com'
    - not aws_ec2_net_advanced

- name: Display new record
  ansible.builtin.debug:
    msg: "Access instance at: {{ aws_ec2_name }}.{{ aws_ec2_dns_zone }}"
  when: not aws_ec2_net_advanced
